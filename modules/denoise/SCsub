#!/usr/bin/env python

import resource_to_cpp

Import("env")
Import("env_modules")

env_oidn = env_modules.Clone()

# Thirdparty source files
thirdparty_dir = "#thirdparty/oidn/"
thirdparty_sources = [
    "mkl-dnn/src/common/batch_normalization.cpp",
    "mkl-dnn/src/common/binary.cpp",
    "mkl-dnn/src/common/concat.cpp",
    "mkl-dnn/src/common/convolution.cpp",
    "mkl-dnn/src/common/convolution_pd.cpp",
    "mkl-dnn/src/common/deconvolution.cpp",
    "mkl-dnn/src/common/dnnl_debug.cpp",
    "mkl-dnn/src/common/dnnl_debug_autogenerated.cpp",
    "mkl-dnn/src/common/eltwise.cpp",
    "mkl-dnn/src/common/engine.cpp",
    "mkl-dnn/src/common/inner_product.cpp",
    "mkl-dnn/src/common/layer_normalization.cpp",
    "mkl-dnn/src/common/lrn.cpp",
    "mkl-dnn/src/common/matmul.cpp",
    "mkl-dnn/src/common/memory.cpp",
    "mkl-dnn/src/common/memory_debug.cpp",
    "mkl-dnn/src/common/memory_desc_wrapper.cpp",
    "mkl-dnn/src/common/memory_storage.cpp",
    "mkl-dnn/src/common/memory_zero_pad.cpp",
    "mkl-dnn/src/common/pooling.cpp",
    "mkl-dnn/src/common/primitive.cpp",
    "mkl-dnn/src/common/primitive_attr.cpp",
    "mkl-dnn/src/common/primitive_cache.cpp",
    "mkl-dnn/src/common/primitive_desc.cpp",
    "mkl-dnn/src/common/primitive_exec_types.cpp",
    "mkl-dnn/src/common/primitive_hashing.cpp",
    "mkl-dnn/src/common/primitive_iterator.cpp",
    "mkl-dnn/src/common/query.cpp",
    "mkl-dnn/src/common/reorder.cpp",
    "mkl-dnn/src/common/resampling.cpp",
    "mkl-dnn/src/common/rnn.cpp",
    "mkl-dnn/src/common/rw_mutex.cpp",
    "mkl-dnn/src/common/scratchpad.cpp",
    "mkl-dnn/src/common/scratchpad_debug.cpp",
    "mkl-dnn/src/common/shuffle.cpp",
    "mkl-dnn/src/common/softmax.cpp",
    "mkl-dnn/src/common/stream.cpp",
    "mkl-dnn/src/common/stream_attr.cpp",
    "mkl-dnn/src/common/sum.cpp",
    "mkl-dnn/src/common/utils.cpp",
    "mkl-dnn/src/common/verbose.cpp",
    "mkl-dnn/src/cpu/bfloat16.cpp",
    "mkl-dnn/src/cpu/cpu_concat.cpp",
    "mkl-dnn/src/cpu/cpu_convolution_list.cpp",
    "mkl-dnn/src/cpu/cpu_engine.cpp",
    "mkl-dnn/src/cpu/cpu_pooling_list.cpp",
    "mkl-dnn/src/cpu/cpu_reorder.cpp",
    "mkl-dnn/src/cpu/cpu_sum.cpp",
    "mkl-dnn/src/cpu/platform.cpp",
    "mkl-dnn/src/cpu/x64/cpu_barrier.cpp",
    "mkl-dnn/src/cpu/x64/cpu_isa_traits.cpp",
    "mkl-dnn/src/cpu/x64/cpu_reducer.cpp",
    "mkl-dnn/src/cpu/x64/jit_avx2_conv_kernel_f32.cpp",
    "mkl-dnn/src/cpu/x64/jit_avx2_convolution.cpp",
    "mkl-dnn/src/cpu/x64/jit_avx512_common_conv_kernel.cpp",
    "mkl-dnn/src/cpu/x64/jit_avx512_common_convolution.cpp",
    "mkl-dnn/src/cpu/x64/jit_avx512_core_bf16cvt.cpp",
    "mkl-dnn/src/cpu/x64/jit_sse41_conv_kernel_f32.cpp",
    "mkl-dnn/src/cpu/x64/jit_sse41_convolution.cpp",
    "mkl-dnn/src/cpu/x64/jit_transpose_src_utils.cpp",
    "mkl-dnn/src/cpu/x64/jit_uni_eltwise.cpp",
    "mkl-dnn/src/cpu/x64/jit_uni_eltwise_injector.cpp",
    "mkl-dnn/src/cpu/x64/jit_uni_pool_kernel.cpp",
    "mkl-dnn/src/cpu/x64/jit_uni_pooling.cpp",
    "mkl-dnn/src/cpu/x64/jit_uni_reorder.cpp",
    "mkl-dnn/src/cpu/x64/jit_uni_reorder_utils.cpp",
    "mkl-dnn/src/cpu/x64/jit_utils/jit_utils.cpp",
    "mkl-dnn/src/cpu/x64/jit_utils/jitprofiling/jitprofiling.c",
    "mkl-dnn/src/cpu/x64/jit_utils/linux_perf/linux_perf.cpp",
    "core/api.cpp",
    "core/color.cpp",
    "core/device.cpp",
    "core/filter.cpp",
    "core/network.cpp",
    "core/tza.cpp",
    "core/unet.cpp",
    "weights/rtlightmap_hdr.cpp",
    "weights/rtlightmap_dir.cpp",
    "common/platform.cpp",
    "common/thread.cpp",
]
thirdparty_sources = [thirdparty_dir + file for file in thirdparty_sources]

thirdparty_include_dirs = [
    "",
    "include",
    "mkl-dnn/include",
    "mkl-dnn/src",
    "mkl-dnn/src/common",
    "mkl-dnn/src/cpu/xbyak",
    "mkl-dnn/src/cpu",
]
thirdparty_include_dirs = [thirdparty_dir + file for file in thirdparty_include_dirs]


env_oidn.Prepend(CPPPATH=thirdparty_include_dirs)
env_oidn.Append(
    CPPDEFINES=["OIDN_DNNL"],
    CFLAGS=["-D__STDC_CONSTANT_MACROS", "-D__STDC_LIMIT_MACROS", "-DNDEBUG", "-D_FORTIFY_SOURCE=2", "-DOIDN_DNNL"],
)

env_thirdparty = env_oidn.Clone()
env_thirdparty.disable_warnings()
env_thirdparty.add_source_files(env.modules_sources, thirdparty_sources)

weights_in_path = thirdparty_dir + "weights/rtlightmap_hdr.tza"
weights_out_path = [thirdparty_dir + "weights/rtlightmap_hdr.gen.cpp", thirdparty_dir + "weights/rtlightmap_hdr.gen.h"]

env_thirdparty.Depends(weights_out_path, weights_in_path)
env_thirdparty.CommandNoCache(weights_out_path, weights_in_path, resource_to_cpp.tza_to_cpp)

weights_in_path = thirdparty_dir + "weights/rtlightmap_dir.tza"
weights_out_path = [thirdparty_dir + "weights/rtlightmap_dir.gen.cpp", thirdparty_dir + "weights/rtlightmap_dir.gen.h"]

env_thirdparty.Depends(weights_out_path, weights_in_path)
env_thirdparty.CommandNoCache(weights_out_path, weights_in_path, resource_to_cpp.tza_to_cpp)

thirdparty_dir = "#thirdparty/oidn/"
thirdparty_ispc_sources = [
    "core/color.ispc",
    "core/upsample.ispc",
    "core/output_copy.ispc",
    "core/input_reorder.ispc",
    "core/output_reorder.ispc",
]
thirdparty_o_sources = [thirdparty_dir + file + ".o" for file in thirdparty_ispc_sources]
thirdparty_ispc_sources = [thirdparty_dir + file for file in thirdparty_ispc_sources]


env_thirdparty_ispc = Environment()

env_thirdparty_ispc.Append(
    BUILDERS={
        "ISPC": Builder(
            action="ispc $SOURCE --arch=x86-64 --addressing=64 -O3 --target=sse4-i32x8, --woff --opt=fast-math --pic --opt=disable-assertions -o $TARGET",
            suffix=".ispc.o",
            src_suffix=".ispc",
            single_source=True,
        )
    }
)

env_thirdparty_ispc.ISPC(thirdparty_ispc_sources)
lib = env_thirdparty_ispc.Library(thirdparty_o_sources)
env.NoCache(lib)
env.Prepend(LIBS=[lib])

env_oidn.add_source_files(env.modules_sources, "denoise_wrapper.cpp")
env_modules.add_source_files(env.modules_sources, ["register_types.cpp", "lightmap_denoiser.cpp"])
